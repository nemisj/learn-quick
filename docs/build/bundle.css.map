{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Card.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Card from './Card.svelte';\n\timport { onMount } from 'svelte';\n\timport { vocabulary } from './vocabularyStore.js';\n\n\tconst pronoun = [\n\t\t'io',\n\t\t'tu',\n\t\t'lui/lei',\n\t\t'noi',\n\t\t'voi',\n\t\t'loro',\n\t];\n\n\tlet flipped = false;\n\n\tlet pronounIndex = -1;\n\tlet index = -1;\n\tlet current;\n\n\tconst shuffle = (word) => {\n\t// randomly it or en or ru \n\tconst reverse = Math.floor(Math.random() * 6) % 2 === 0;\n\tif (reverse ) {\n\t\treturn [\n\t\t\tword.it,\n\t\t\tword.ru || word.en,\n\t\t];\n\t} else {\n\t\treturn [\n\t\t\tword.ru || word.en,\n\t\t\tword.it,\n\t\t];\n\t}\n\t};\n\n\tconst start = () => {\n\t\t// take the random word from bad\n\t\tconst words = $vocabulary;\n\t\tconst bad = words.bad;\n\t\tconst length = bad.length;\n\t\tif (length === 0) {\n\t\t\tcurrent = undefined;\n\t\t\treturn;\n\t\t} else if (length === 1) {\n\t\t\tindex = 0;\n\t\t\tcurrent = shuffle(bad[0]);\n\t\t\treturn;\n\t\t}\n\n\t\tlet newIndex;\n\t\tdo {\n\t\t\tnewIndex = Math.floor(Math.random() * length);\n\t\t} while (newIndex === index);\n\t\tindex = newIndex;\n\n\t\t// check type\n\t\tcurrent = shuffle(bad[index]);\n\t};\n\n\tconst next = ({ detail }) => {\n\t\tif (flipped) {\n\t\t\tflipped = false;\n\t\t\t// we are already turned. switch to the next word\n\t\t\tconst words = $vocabulary;\n\t\t\tconst item = words.bad[index];\n\n\t\t\t// we might have word with conjugation\n\t\t\t// this is a different beast\n\t\t\tif (item.conjugation) {\n\t\t\t\tif (detail) {\n\t\t\t\t\tpronounIndex++;\n\n\t\t\t\t\tif (pronounIndex < pronoun.length) {\n\t\t\t\t\t\tcurrent = [\n\t\t\t\t\t\t\titem.conjugation[pronounIndex],\n\t\t\t\t\t\t\tpronoun[pronounIndex]\n\t\t\t\t\t\t]\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpronounIndex = -1;\n\t\t\t}\n\n\t\t\tif (detail) {\n\t\t\t\twords.good.push(item);\n\t\t\t\twords.bad.splice(index, 1);\n\t\t\t\t$vocabulary = words;\n\t\t\t}\n\t\t\tstart();\n\t\t} else {\n\t\t\tflipped = true;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tstart();\n\t});\n</script>\n\n<main>\n\t<div>Good: {$vocabulary.good.length}; Bad: {$vocabulary.bad.length}</div>\n\t{#if current}\n\t\t<Card back={current[0]} front={current[1]} flipped={flipped} on:click={next} />\n\t{/if}\n\t{#if !current}\n\t\tThere are no words anymore. Genius;\n\t{/if}\n</main>\n\n<style>\n\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmargin: 0 auto;\n\t}\n\n</style>\n",
    "<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\texport let back;\n\texport let front;\n\texport let flipped;\n\n\tconst dispatch = createEventDispatcher();\n\n\tconst onClick = (res) => {\n\t\tdispatch('click', res);\n\t};\n</script>\n\n<div class=\"scene\">\n\t<div class=\"zork {flipped && 'flipped'}\">\n\t\t<div class=\"text\" style=\"visibility: hidden; min-width: 200px;\">{back.length > front.length ? back : front}</div>\n\t\t<h1 class=\"card text back\">{back}</h1>\n\t\t<h1 class=\"card text\">{front}</h1>\n\t\t<div class=\"buttons-container\">\n\t\t\t<div class=\"good\" on:click={() => onClick(true)} />\n\t\t\t<div class=\"bad\" on:click={() => onClick(false)} />\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t.scene {\n\t\tperspective: 600px;\n\t}\n\n\t.zork {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\tperspective: 600px;\n\t\ttransform-style: preserve-3d;\n\t\ttransition: transform 2s;\n\t}\n\n\t.zork.flipped {\n\t\ttransform: rotateY( 180deg );\n\t}\n\n\t.text {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t\tmargin: 0;\n\t\tpadding: 1rem 2rem;\n\t\tbox-sizing: border-box;\n\t\tjustify-content: center;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.card {\n\t\tposition: relative;\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tbackface-visibility: hidden;\n\t\tbackground-color: #f4f4f4;\n\t\tborder-radius: 10px;\n\t}\n\n\t.back {\n\t\tcolor: transparent;\n\t\tbackground: #ff3e00;\n\t\ttransform: rotateY( 180deg );\n\t}\n\n\t.flipped .back {\n\t\tcolor: #fff;\n\t}\n\n\t.buttons-container {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tcursor: pointer;\n\t\tdisplay: flex;\n\t}\n\n\t.buttons-container > div {\n\t\tflex-grow: 1;\n\t}\n\n\t.good {\n\t\tcursor: w-resize;\n\t}\n\n\t.bad {\n\t\tcursor: e-resize;\n\t}\n\n\t.flipped .buttons-container {\n\t\ttransform: rotateY(180deg);\n\t\tcursor: inherit;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAiHC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC;AC1FD,MAAM,8BAAC,CAAC,AACP,WAAW,CAAE,KAAK,AACnB,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,KAAK,CAClB,eAAe,CAAE,WAAW,CAC5B,UAAU,CAAE,SAAS,CAAC,EAAE,AACzB,CAAC,AAED,KAAK,QAAQ,8BAAC,CAAC,AACd,SAAS,CAAE,SAAS,MAAM,EAAE,AAC7B,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,UAAU,CAAE,UAAU,CACtB,eAAe,CAAE,MAAM,CACvB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACpB,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,mBAAmB,CAAE,MAAM,CAC3B,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,KAAK,CAAE,WAAW,CAClB,UAAU,CAAE,OAAO,CACnB,SAAS,CAAE,SAAS,MAAM,EAAE,AAC7B,CAAC,AAED,uBAAQ,CAAC,KAAK,eAAC,CAAC,AACf,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,kBAAkB,8BAAC,CAAC,AACnB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,IAAI,AACd,CAAC,AAED,iCAAkB,CAAG,GAAG,eAAC,CAAC,AACzB,SAAS,CAAE,CAAC,AACb,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,MAAM,CAAE,QAAQ,AACjB,CAAC,AAED,IAAI,8BAAC,CAAC,AACL,MAAM,CAAE,QAAQ,AACjB,CAAC,AAED,uBAAQ,CAAC,kBAAkB,eAAC,CAAC,AAC5B,SAAS,CAAE,QAAQ,MAAM,CAAC,CAC1B,MAAM,CAAE,OAAO,AAChB,CAAC"
}